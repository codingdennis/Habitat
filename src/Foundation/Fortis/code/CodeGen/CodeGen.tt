<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="Fortis\Fortis.t4" #>
/*
 * Fortis Template Models for Habitat, based on Unicorn serialization.
 * Generated at <#= DateTime.Now #>
 *
 * To regenerate after template changes, right-click on CodeGen.tt and select Run Custom Tool.
 */

<#
	var srcFolderPath = this.Host.ResolvePath(@"..\..\..\..\..\src");
    var templateFolderPaths = new List<string>();
	if (System.IO.Directory.Exists(srcFolderPath))
	{
		CollectUnicornTemplateSerializationFolders(srcFolderPath, templateFolderPaths);
		GenerateUnicornFortisModels(templateFolderPaths);
	}
	else 
	{
#>
    // src folder does not exist, code generation skipped.
<#
	}
#>
<#+
	// Global variables
	bool _moduleSolrEnabled = false;

	// Helper methods
    private static void CollectUnicornTemplateSerializationFolders(string srcFolderPath, List<string> templateFolderPaths)
    {
        // No recursive to speed up by assuming srcFolderPath is the src folder that contains the Feature, Foundation and Project layers
        var srcFolder = new System.IO.DirectoryInfo(srcFolderPath);
        var layerFolders = srcFolder.GetDirectories();
        foreach (var layer in layerFolders)
        {
            var moduleFolders = layer.GetDirectories();
            foreach (var module in moduleFolders)
            {
                // Find serialization folder
                var serializationFolder = module.GetDirectories("serialization").FirstOrDefault();
                if (serializationFolder != null)
                {
                    // Now we only care about the templates
                    var templateFolders = serializationFolder.GetDirectories("*.Templates");
                    templateFolderPaths.AddRange(templateFolders.Select(o => o.FullName));
                }
            }
        }
    }
#>
