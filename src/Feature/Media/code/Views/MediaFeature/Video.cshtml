@using Sitecore.Data.Items
@using Sitecore.Foundation.Alerts
@using Sitecore.Foundation.Alerts.Extensions
@using Sitecore.Foundation.Dictionary.Repositories
@using Sitecore.Foundation.SitecoreExtensions.Extensions
@using Sitecore.Resources.Media
@using Fortis.Model
@using Fortis.Foundation.CodeGen.Templates.Project.Common.ContentTypes.Media
@model IRenderingModel<IItemWrapper, IVideo>

@if (Model == null || (!Model.RenderingItem?.IsDerived(VideoItemConstants.TemplateID) ?? true))
{
    @Html.PageEditorError(AlertTexts.InvalidDataSourceTemplate(VideoItemConstants.TemplateID), AlertTexts.InvalidDataSourceTemplateFriendlyMessage, Model.PageItem?.ItemID, Model.RenderingItem?.ItemID)
    return;
}
@{
    const int DefaultWidth = 750;
    var thumbnail = Model.RenderingItem?.MediaThumbnail.Render(new {@class = "img-responsive", mw = DefaultWidth});
}

@if ((!Model.RenderingItem.MediaVideoLink.HasValue || string.IsNullOrWhiteSpace(thumbnail?.ToString())) && !Sitecore.Context.PageMode.IsExperienceEditorEditing)
{
    return;
}

<div>
    <div class="embed-responsive embed-responsive-16by9">
        @if (Model.RenderingItem.MediaVideoLink.IsExternal)
        {
            if (Sitecore.Context.PageMode.IsExperienceEditorEditing)
            {
                <small>@DictionaryPhraseRepository.Current.Get("/Media/Video/Page Editor Label", "External videos are not shown in edit mode. Please make sure that the video can be used as an iframe embed.")</small>
                @thumbnail
            }
            else
            {
                <iframe width="@DefaultWidth" height="@(DefaultWidth / 16 * 9)" src="@Model.RenderingItem.MediaVideoLink.Url"></iframe>
            }
        }
        else
        {
            if (!Model.RenderingItem.MediaVideoLink.IsMediaLink)
            {
                @thumbnail
            }
            else
            {
                <video width="@DefaultWidth" height="@(DefaultWidth / 16 * 9)" autoplay loop poster="@Model.RenderingItem.MediaThumbnail.GetSourceUri()">
                    <source src="@Model.RenderingItem.MediaVideoLink.Url" type="@Model.RenderingItem.MediaVideoLink.MediaMimeType">
                    @thumbnail
                </video>
            }
        }
    </div>
</div>